#!/bin/bash
#----
## @Synopsis	This file contains functions to be used by Centreon install scripts
## @Copyright	Copyright 2008, Guillaume Watteeux
## @Copyright	Copyright 2008-2020, Centreon
## @Licence	GPLv2
## This file contains functions to be used by Centreon install scripts
#----
## Centreon is developed with GPL Licence 2.0
##
## GPL License: http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
##
## Developed by : Julien Mathis - Romain Le Merlus
## Contributors : Guillaume Watteeux - Maximilien Bersoult
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
##    For information : infos@centreon.com

# debug ?
#set -x

## VARS
yes="$(gettext "y")"
no="$(gettext "n")"
ok="$(gettext "OK")"
fail="$(gettext "FAIL")"
notfound="$(gettext "NOT FOUND")"
notdefined="$(gettext "NOT DEFINED")"
passed="$(gettext "PASSED")"
warning="$(gettext "WARNING")"
critical="$(gettext "CRITICAL")"
# Init binary to empty to use pathfind or manual define
GREP=""
CAT=""
SED=""
CHMOD=""
CHOWN=""

## COLOR FUNCTIONS

RES_COL="65"
MOVE_TO_COL="\\033[${RES_COL}G"
SETCOLOR_INFO="\\033[1;38m"
SETCOLOR_SUCCESS="\\033[1;32m"
SETCOLOR_FAILURE="\\033[1;31m"
SETCOLOR_WARNING="\\033[1;33m"
SETCOLOR_NORMAL="\\033[0;39m"

echo_title() {
    echo -e "\n"
    echo -e "$1"
    echo -e "--------------------------------------------------------------------------------"
}

#----
## print info message
## add info message to log file
## @param	message info
## @param	type info (ex: INFO, username...)
## @Stdout	info message
## @Globals	LOG_FILE
#----
echo_info() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_INFO}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## Trim whitespaces and tabulations
## @param	string to trim
## @return	string
#----
trim() {
    echo "$1" | sed 's/^[ \t]*\(.*\)[ \t]*$/\1/'
}

#----
## print success message
## add success message to log file
## @param	message
## @param	word to specify success (ex: OK)
## @Stdout	success message
## @Globals	LOG_FILE
#----
echo_success() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_SUCCESS}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print failure message
## add failure message to log file
## @param	message
## @param	word to specify failure (ex: fail)
## @Stdout	failure message
## @Globals	LOG_FILE
#----
echo_failure() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_FAILURE}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print passed message
## add passed message to log file
## @param	message
## @param	word to specify pass (ex: passed)
## @Stdout	passed message
## @Globals	LOG_FILE
#----
echo_passed() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print warning message
## add warning message to log file
## @param	message
## @param	word to specify warning (ex: warn)
## @Stdout	warning message
## @Globals	LOG_FILE
#----
echo_warning() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## add message on log file
## @param	type of message level (debug, info, ...)
## @param	message
## @Globals	LOG_FILE
#----
log() {
    local program="$0"
    local type="$1"
    shift
    local message="$@"
    echo -e "[$program]:$type: $message" >> $LOG_FILE
}


# FUNCTIONS
#----
## find in $PATH if binary exist
## @param	file to test
## @return 0	found
## @return 1	not found
## @Globals	PATH
#----
pathfind() {
    OLDIFS="$IFS"
    IFS=:
    for p in $PATH; do
        if [ -x "$p/$*" ]; then
            IFS="$OLDIFS"
            return 0
        fi
    done
    IFS="$OLDIFS"
    return 1
}

#----
## find in $PATH if binary exist and return dirname
## @param	file to test
## @param	global variable to set a result
## @return 0	found
## @return 1	not found
## @Globals	PATH
#----
pathfind_ret() {
    local bin=$1
    local var_ref=$2
    local OLDIFS="$IFS"
    IFS=:
    for p in $PATH; do
        if [ -x "$p/$bin" ]; then
            IFS="$OLDIFS"
            eval $var_ref=$p
            return 0
        fi
    done
    IFS="$OLDIFS"
    return 1
}

#----
## define a specific variables for grep,cat,sed,... binaries
## This functions was been use in first line on your script
## @return 0	All is't ok
## @return 1	problem with one variable
## @Globals	GREP, CAT, SED, CHMOD, CHOWN
#----
define_specific_binary_vars() {
    local vars_bin="GREP CAT SED CHMOD CHOWN"
    local var_bin_tolower=""
    for var_bin in $vars_bin ; do
        if [ -z $(eval echo \$$var_bin) ] ; then
            var_bin_tolower="$(echo $var_bin | tr [:upper:] [:lower:])"
            pathfind_ret "$var_bin_tolower" "$(echo -n $var_bin)"
            if [ "$?" -eq 0 ] ; then
                eval "$var_bin='$(eval echo \$$var_bin)/$var_bin_tolower'"
                export $(echo $var_bin)
                log "INFO" "$var_bin=$(eval echo \$$var_bin)"
            else
                return 1
            fi
        fi
    done
    return 0
}

#----
## make a question with yes/no possiblity
## use "no" response by default
## @param	message to print
## @param 	default response (default to no)
## @return 0 	yes
## @return 1 	no
#----
yes_no_default() {
    local message=$1
    local default=${2:-$no}
    local res="not_define"
    while [ "$res" != "$yes" ] && [ "$res" != "$no" ] && [ ! -z "$res" ] ; do
        echo -en "\n$message"
        [ "$default" = "$yes" ] && echo " [Y/n]"
        [ "$default" = "$no" ] && echo " [y/N]"
        echo -en "> "
        read res
        [ -z "$res" ] && res="$default"
    done
    if [ "$res" = "$yes" ] ; then
        return 0
    else
        return 1
    fi
}

#----
## print a message, simple answer to the question
#----
answer() {
    local message=$1
    local default=$2
    local var_ref=$3
    local res=""
    local first=0
    while [ -z "$res" ] ; do
        echo -en "\n$message"
        [ "$default" != "NO_DEFAULT" ] && echo " [$default]"
        echo -en "> "
        read res
        if [ -z "$res" ] ; then
            [ "$default" != "NO_DEFAULT" ] && res=$default
        fi
    done
    eval $var_ref=$res
    return 0
}

test_value_from_var() {
    local var="$1"
    local message="$2"
    local value=$(eval echo \$$var)
    if [ -z "$value" ] ; then
        echo_failure "$message" "$notdefined"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    return 0
}

test_file() {
    local file="$1"
    local message="$2"
    if [ -z "$file" ] ; then
        echo_failure "$message" "$notdefined"
        return 1
    fi
    if [ ! -e $file ] ; then
        echo_failure "$message '$file'" "$notfound"
        return 1
    fi
    return 0
}

test_file_from_var() {
    local var="$1"
    local message="$2"
    local file=$(eval echo \$$var)
    if [ -z "$file" ] ; then
        echo_failure "$message" "$notdefined"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    if [ ! -e $file ] ; then
        echo_failure "$message '$file'" "$notfound"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    return 0
}

test_dir() {
    local dir="$1"
    local message="$2"
    if [ -z "$dir" ] ; then
        echo_failure "$message" "$notdefined"
        return 1
    fi
    if [ ! -d "$dir" ] ; then
        echo_failure "$message '$dir'" "$notfound"
        return 1
    fi
    return 0
}

test_dir_from_var() {
    local var="$1"
    local message="$2"
    local dir=$(eval echo \$$var)
    if [ -z "$dir" ] ; then
        echo_failure "$message" "$notdefined"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    if [ ! -d "$dir" ] ; then
        echo_failure "$message '$dir'" "$notfound"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    return 0
}

test_user_from_var() {
    local var="$1"
    local message="$2"
    local user=$(eval echo \$$var)
    if [ -z "$user" ] ; then
        echo_failure "$message" "$notdefined"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    grep "^$user:" /etc/passwd &>/dev/null
    if [ $? -ne 0 ] ; then
        echo_failure "$message '$user'" "$notfound"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    return 0
}

test_group_from_var() {
    local var="$1"
    local message="$2"
    local group=$(eval echo \$$var)
    if [ -z "$group" ] ; then
        echo_failure "$message" "$notdefined"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    grep "^$group:" /etc/group &>/dev/null
    if [ $? -ne 0 ] ; then
        echo_failure "$message '$group'" "$notfound"
        requirements_failed="${requirements_failed} $var "
        return 1
    fi
    return 0
}

create_dir() {
    local dirname="$1"
    if [ ! -d "$dirname" ] ; then
        mkdir -p "$dirname"
        if [ $? -ne 0 ] ; then
            echo_failure "Could not create directory $dirname" "$fail"
            return 1
        fi
    fi
    return 0
}

copy_file() {
    local file="$1"
    local dest="$2"
    if [ ! -f "$file" ] && [[ ! "$file" =~ \*$ ]] ; then
        echo_failure "Not a file '$file'" "$fail"
        return 1
    else
        cp -f $file $dest
        if [ $? -ne 0 ] ; then
            echo_failure "Copy of '$file' to '$dest' failed" "$fail"
            return 1
        fi
    fi
    return 0
}

copy_file_no_replace() {
    local file="$1"
    local dest="$2"
    local code=0
    if [ ! -f "$file" ] ; then
        echo_failure "Not a file '$file'" "$fail"
        code=1
    else
        if [ -f "$dest" ] ; then
            dest=${dest}".new"
            code=2
        fi
        cp -f $file $dest
        if [ $? -ne 0 ] ; then
            echo_failure "Copy of '$file' to '$dest' failed" "$fail"
            code=1
        fi        
    fi
    return "$code"
}

copy_dir() {
    local dir="$1"
    local dest="$2"
    if [ ! -d "$dir" ] && [[ ! "$dir" =~ \*$ ]] ; then
        echo_failure "Not a directory '$dirname'" "$fail"
        return 1
    else
        cp -rf $dir $dest
        if [ $? -ne 0 ] ; then
            echo_failure "Copy of '$dir' to '$dest' failed" "$fail"
            return 1
        fi
    fi
    return 0
}

set_ownership() {
    local dir_file="$1"
    local user="$2"
    local group="$3"
    if [ -z "$dir_file" ] ; then
        return 1
    fi
    if [ -f "$dir_file" ] ; then
        ${CHOWN} $user:$group "$dir_file"
    elif [ -d "$dir_file" ] ; then
        ${CHOWN} -R $user:$group "$dir_file"
    fi
    return 0
}

set_permissions() {
    local dir_file="$1"
    local mode="$2"
    if [ -z "$dir_file" ] ; then
        return 1
    fi
    if [ -f "$dir_file" ] ; then
        find $dir_file -type f -print | xargs -I '{}' ${CHMOD} $mode '{}'
    elif [ -d "$dir_file" ] ; then
        find $dir_file -type d -print | xargs -I '{}' ${CHMOD} $mode '{}'
    elif [[ "$dir_file" =~ \*$ ]]  ; then
        find $dir_file -type f -print | xargs -I '{}' ${CHMOD} $mode '{}'
    else
        echo_failure "Not a file or a directory '$dir_file'" "$fail"
        return 1
    fi
    return 0
}

create_user() {
    local username="$1"
    local groupname="$2"
    local home="$3"

    test_user $username
    if [ $? -ne 0 ]; then
        useradd -r -s "/bin/sh" -d "$home" -g "$groupname" "$username"
        if [ $? -ne 0 ]; then
            echo_failure "Could not create user '$username'" "$fail"
            return 1
        fi
        echo_success "Create user '$username'" "$ok"
    fi
    return 0
}

create_group() {
    local groupname="$1"

    test_group $groupname
    if [ $? -ne 0 ]; then
        groupadd -r "$groupname"
        if [ $? -ne 0 ] ; then
            echo_failure "Could not create group '$groupname'" "$fail"
            return 1
        fi
        echo_success "Create group '$groupname'" "$ok"
    fi
    return 0
}

test_user() {
    grep "^$1:" /etc/passwd &>/dev/null
    return $?
}

test_group() {
    grep "^$1:" /etc/group &>/dev/null
    return $?
}

#----
## Add a group to a user
## @param	user name
## @param	group name
## @Globals	fail
## @return 0 	 end
## @return 1 	 fail
#----
add_user_to_group() {
    local user=$1
    local group=$2
    if [ -z "$user" -o -z "$group" ]; then
        echo_failure "Could not add group $group to user $user" "$fail"
        return 1
    fi
    usermod -a -G $group $user &>/dev/null
    local ret=$?
    check_result $ret "Add user '$user' to group '$group'"
    return $ret
}

#----
## Check php version which should be greater than the minimum version required
## @Globals	PHP_BIN, PHP_MIN_VERSION
#----
check_php_version() {
    local php_version=$($PHP_BINARY --version | head -n 1 | cut -d " " -f 2 | cut -c 1,3)
    if [ "$php_version" -lt "$PHP_MIN_VERSION" ] ; then
        echo_failure "$(gettext "Minimum PHP version required is : $PHP_MIN_VERSION")" "$fail"
        return 1
    else
        # echo_success "$(gettext "PHP version: $php_version")" "$ok"
        return 0
    fi
}


check_perl_lib_directory() {
    PERL_LIB_DIR=$(perl -V:installvendorlib | cut -d "'" -f 2)
    # for freebsd
    if [ "$PERL_LIB_DIR" = "" -o "$PERL_LIB_DIR" = "UNKNOWN" ]; then
        PERL_LIB_DIR=$(perl -V:installsitelib | cut -d "'" -f 2)
    fi
}

#----
## Copy ssh keys to gorgone and add proper rights
#----
copy_ssh_keys_to_gorgone() {
    if [ ! -d "$GORGONE_VARLIB/.ssh" ] ; then
        mkdir -p "$GORGONE_VARLIB/.ssh"
        if [ $? -ne 0 ] ; then
            echo_failure "$(gettext "Cannot create the subfolder $GORGONE_VARLIB/.ssh")" "$fail"
            return 1
        fi
    fi

    if [ -z $CENTREON_SPOOL_SSH ] ; then
        echo_failure "$(gettext "Cannot find the '.ssh' folder in the $CENTREON_USER home folder")" "$fail"
        return 1
    fi

    cp -Rf "$CENTREON_SPOOL_SSH/.ssh" "$GORGONE_VARLIB"
    if [ $? -ne 0 ] ; then
        echo_failure "$(gettext "Cannot move the SSH keys to $GORGONE_VARLIB/.ssh")" "$fail"
        return 1
    fi

    ${CHOWN} -R "$GORGONE_USER:$GORGONE_GROUP" "$GORGONE_VARLIB/.ssh"
    if [ $? -ne 0 ] ; then
        echo_failure "$(gettext "Cannot modify the owner of the files in $GORGONE_VARLIB/.ssh folder to $GORGONE_USER:$GORGONE_GROUP")" "$fail"
        return 1
    fi

    ${CHMOD} 600 "$GORGONE_VARLIB/.ssh/id_rsa"
    if [ $? -ne 0 ] ; then
        echo_failure "$(gettext "Cannot modify the rights of files in folder $GORGONE_VARLIB/.ssh")" "$fail"
        return 1
    fi

    echo_success "$(gettext "Copy SSH keys to $GORGONE_VARLIB/.ssh")" "$ok"
    return 0
}

#----
## Define apache service init script and ask to reload apache
## @return 0 	Apache reload OK
## @return 1	Apache reload FAIL
#----
reload_service_apache() {
    local service=""
    if [ -x /bin/systemctl ] ; then
        if [ $(/bin/systemctl list-units | grep httpd24-httpd | wc -l) -gt "0" ] ; then
            service="httpd24-httpd"
        elif [ $(/bin/systemctl list-units | grep httpd | wc -l) -gt "0" ] ; then
            service="httpd"
        elif [ $(/bin/systemctl list-units | grep apache2 | wc -l) -gt "0" ] ; then
            service="apache2"
        else
            echo_failure "Cannot find Apache service" "$fail"
            return 1
        fi
    fi

    /bin/systemctl enable $service >> $LOG_FILE 2>&1
    /bin/systemctl reload $service >> $LOG_FILE 2>&1
    if [ "$?" -eq 0 ] ; then
        echo_success "Reloading Apache service" "$ok"
        return 0
    else
        echo_failure "Reloading Apache service '$service'" "$fail"
        return 1
    fi
}

enable_conf_apache() {
    if [ $(/bin/systemctl list-units | grep apache2 | wc -l) -eq "0" ] ; then
        return 0
    fi

    a2enconf 10-centreon  >> $LOG_FILE 2>&1
    if [ "$?" -eq 0 ] ; then
        echo_success "Enabling Apache configuration" "$ok"
        return 0
    else
        echo_failure "Enabling Apache configuration '10-centreon'" "$fail"
        return 1
    fi
}

restart_service_php_fpm() {
    local service=""
    if [ -x /bin/systemctl ] ; then
        if [ $(/bin/systemctl list-units | grep php | grep fpm | wc -l) -gt "0" ] ; then
            service=$(/bin/systemctl list-units | grep php | grep fpm | cut -f 3 -d " ")
        else
            echo_failure "Cannot find PHP FPM service" "$fail"
            return 1
        fi
    fi

    /bin/systemctl enable $service >> $LOG_FILE 2>&1
    /bin/systemctl restart $service >> $LOG_FILE 2>&1
    if [ "$?" -eq 0 ] ; then
        echo_success "Restarting PHP FPM service" "$ok"
        return 0
    else
        echo_failure "Restarting PHP FPM service '$service" "$fail"
        return 1
    fi
}

restart_service_mariadb() {
    local service=""
    if [ -x /bin/systemctl ] ; then
        if [ $(/bin/systemctl list-units | grep mariadb | wc -l) -gt "0" ] ; then
            service="mariadb"
        elif [ $(/bin/systemctl list-units | grep mysql | wc -l) -gt "0" ] ; then
            service="mysql"
        else
            echo_failure "Cannot find MariaDB service" "$fail"
            return 1
        fi
    fi

    /bin/systemctl enable $service >> $LOG_FILE 2>&1
    /bin/systemctl restart $service >> $LOG_FILE 2>&1
    if [ "$?" -eq 0 ] ; then
        echo_success "Restarting MariaDB service" "$ok"
        return 0
    else
        echo_failure "Restarting MariaDB service '$service" "$fail"
        return 1
    fi
}

enable_service_centreon() {
    local service=""

    /bin/systemctl enable centreon >> $LOG_FILE 2>&1
    if [ "$?" -eq 0 ] ; then
        echo_success "Enabling Centreon service" "$ok"
        return 0
    else
        echo_failure "Enabling Centreon service 'centreon'" "$fail"
        return 1
    fi
}

reload_daemon() {
    /bin/systemctl daemon-reload >> $LOG_FILE 2>&1
    return $?
}

#----
## Check PHP FPM configuration directory
## @Globals	PHPFPM_CONF_DIR
#----
check_php_fpm_directory() {
    if [ -z "$PHPFPM_CONF_DIR" ] ; then
        if [ -d /etc/php/7.2/fpm/pool.d ]; then
            PHPFPM_CONF_DIR="/etc/php/7.2/fpm/pool.d"
        elif [ -d /etc/opt/rh/rh-php72/php-fpm.d ] ; then
            PHPFPM_CONF_DIR="/etc/opt/rh/rh-php72/php-fpm.d"
        elif [ -d /etc/php/7.3/fpm/pool.d ]; then
            PHPFPM_CONF_DIR="/etc/php/7.3/fpm/pool.d"
        elif [ -d /etc/opt/rh/rh-php73/php-fpm.d ] ; then
            PHPFPM_CONF_DIR="/etc/opt/rh/rh-php73/php-fpm.d"
        elif [ -d /etc/php/7.1/fpm/pool.d ]; then
            PHPFPM_CONF_DIR="/etc/php/7.1/fpm/pool.d"
        elif [ -d /etc/opt/rh/rh-php71/php-fpm.d ] ; then
            PHPFPM_CONF_DIR="/etc/opt/rh/rh-php71/php-fpm.d"
        elif [ -d /etc/php-fpm.d ] ; then
            PHPFPM_CONF_DIR="/etc/php-fpm.d"
        fi
    fi
    PHPFPM_CONF_DIR=${PHPFPM_CONF_DIR%/}
    export PHPFPM_CONF_DIR

    if [ -z "$PHPFPM_LOG_DIR" ] ; then
        if [ -d /var/log/php-fpm ]; then
            PHPFPM_LOG_DIR="/var/log/php-fpm"
        fi
    fi
    PHPFPM_LOG_DIR=${PHPFPM_LOG_DIR%/}
    export PHPFPM_LOG_DIR

    return 0
}

check_mariadb_directory() {
    if [ -z "$MARIADB_CONF_DIR" ] ; then
        if [ -d /etc/my.cnf.d ]; then
            MARIADB_CONF_DIR="/etc/my.cnf.d"
        elif [ -d /etc/mysql/conf.d ] ; then
            MARIADB_CONF_DIR="/etc/mysql/conf.d"
        fi
    fi
    MARIADB_CONF_DIR=${MARIADB_CONF_DIR%/}
    export MARIADB_CONF_DIR

    return 0
}

print_mariadb_conf() {
	echo "$(<$BASE_DIR/install/src/centreon-mysql.cnf)"

    return 0
}

#----
## Define where is Apache config directory
## @return 0
## @Globals	APACHE_DIR, APACHE_CONF_DIR, APACHE_CONF
#----
check_apache_directory() {
    if [ -z "$APACHE_DIR" -o -z "$APACHE_CONF_DIR" ] ; then
        if [ -d /opt/rh/httpd24/root/etc/httpd/conf ] ; then
            APACHE_DIR="/opt/rh/httpd24/root/etc/httpd/conf"
            APACHE_CONF_DIR="/opt/rh/httpd24/root/etc/httpd/conf.d"
        elif [ -d /etc/apache/conf ] ; then
            APACHE_DIR="/etc/apache/conf"
            APACHE_CONF_DIR="/etc/apache/conf.d"
        elif [ -d /usr/local/apache2/conf ] ; then
            APACHE_DIR="/usr/local/apache2/conf"
            APACHE_CONF_DIR="/usr/local/apache2/conf"
        elif [ -d /etc/apache2 ] ; then
            APACHE_DIR="/etc/apache2"
            APACHE_CONF_DIR="/etc/apache2/conf-available"
            if [ -d '/etc/apache2/conf-available' ] ; then
                APACHE_CONF_DIR="/etc/apache2/conf-available"
            elif [ -d '/etc/apache2/conf.d' ] ; then
                APACHE_CONF_DIR="/etc/apache2/conf.d"
            fi
        elif [ -d /etc/httpd/conf ] ; then
            APACHE_DIR="/etc/httpd/conf"
            APACHE_CONF_DIR="/etc/httpd/conf.d"
        elif [ -d /usr/local/etc/apache ] ; then
            APACHE_DIR="/usr/local/etc/apache"
            APACHE_CONF_DIR="/usr/local/etc/apache/Includes"
        elif [ -d /usr/local/etc/apache2 ] ; then
            APACHE_DIR="/usr/local/etc/apache2"
            APACHE_CONF_DIR="/usr/local/etc/apache2/Includes"
        elif [ -d /usr/local/etc/apache22 ] ; then
            APACHE_DIR="/usr/local/etc/apache22"
            APACHE_CONF_DIR="/usr/local/etc/apache22/Includes"
        fi
    fi
    APACHE_DIR=${APACHE_DIR%/}
    export APACHE_DIR
    APACHE_CONF_DIR=${APACHE_CONF_DIR%/}
    export APACHE_CONF_DIR

    # if [ -z "$APACHE_CONF" ] ; then
    #     if [ -e $APACHE_DIR/apache2.conf ] ; then
    #         APACHE_CONF="apache2.conf"
    #     elif [ -e $APACHE_DIR/apache.conf ] ; then
    #         APACHE_CONF="apache.conf"
    #     elif [ -e $APACHE_DIR/commondhttpd.conf ] ; then
    #         APACHE_CONF="commondhttpd.conf"
    #     elif [ -e $APACHE_DIR/httpd.conf ] ; then
    #         APACHE_CONF="httpd.conf"
    #     fi
    # fi
    # APACHE_CONF=${APACHE_CONF%/}
    # export APACHE_CONF
    return 0
}

#----
## Find Apache user
## @Globals	APACHE_USER, APACHE_DIR, APACHE_CONF
#----
check_apache_user() {
    # init APACHE_USER if not define
    APACHE_USER="$APACHE_USER"

    if [ -n "$APACHE_USER" ] ; then
        return 0
    fi
    local found=0
    if [ -e /etc/apache2/envvars ] ; then
        # for Debian system (lenny)
        APACHE_USER=`${CAT} /etc/apache2/envvars |${GREP} "USER" | cut -d= -f2`
        if [ -z "$APACHE_USER" ] ; then
            found=0
        else
            found=1
        fi
    elif [ -e /etc/apache2/uid.conf ] ; then
        # for SuSe system
        APACHE_USER=`${CAT} /etc/apache2/uid.conf |${GREP} -e "^User" | cut -d" " -f2`
        if [ -z "$APACHE_USER" ] ; then
            found=0
        else
            found=1
        fi
    fi
    if [ "$found" -eq 0 ] ; then
        APACHE_USER=`${CAT} $APACHE_DIR/$APACHE_CONF | ${GREP} -e "^User" | cut -d" " -f2`
        if [ -z "$APACHE_USER"  ] ; then
            local APACHE_USER_TEMP=""
            for fichier in $APACHE_DIR/*
            do
                if [ -f "$fichier" ] ; then
                    APACHE_USER_TEMP=`${CAT} $fichier | ${GREP} -e "^User" | cut -d" " -f2`
                    if [ -n "$APACHE_USER_TEMP" ] ; then
                        APACHE_USER=$APACHE_USER_TEMP
                    fi
                fi
            done
        fi
    fi
    
    return 0
}

#----
## Find Apache group
## @Globals	APACHE_GROUP, APACHE_DIR, APACHE_CONF
#----
check_apache_group() {
    # init APACHE_GROUP if not define
    APACHE_GROUP="$APACHE_GROUP"

    if [ -n "$APACHE_GROUP" ] ; then
        return 0
    fi
    local found=0
    if [ -e /etc/apache2/envvars ] ; then
        # for debian system
        APACHE_GROUP=`${CAT} /etc/apache2/envvars |${GREP} "GROUP" |cut -d= -f2`
        if [ -z "$APACHE_GROUP" ] ; then
            found=0
        else
            found=1
        fi
    elif [ -e /etc/apache2/uid.conf ] ; then
        # for SuSe system
        APACHE_GROUP=`${CAT} /etc/apache2/uid.conf |${GREP} -e "^Group" | cut -d" " -f2`
        if [ -z "$APACHE_GROUP" ] ; then
            found=0
        else
            found=1
        fi
    fi
    if [ "$found" -eq 0 ] ; then
        APACHE_GROUP=`${CAT} $APACHE_DIR/$APACHE_CONF | ${GREP} -e "^Group" | cut -d" " -f2`
        if [  -z "$APACHE_GROUP"  ] ; then
            local APACHE_GROUP_TMP=""
            for fichier in $APACHE_DIR/*
            do
                if [ -f "$fichier" ];	then
                    APACHE_GROUP_TEMP=`${CAT} $fichier | ${GREP} -e "^Group" | cut -d" " -f2`
                    if [ -n "$APACHE_GROUP_TEMP" ]; then
                        APACHE_GROUP=$APACHE_GROUP_TEMP
                    fi
                fi
            done
        fi
    fi

    return 0
}

#----
## Copy Source directory on temporary working directory
## Copy Source directory and prepare work and final
## @Globals	TMP_DIR
#----
copy_in_tmp_dir() {
    local srclistcp="bin cron config logrotate GPL_LIB lib snmptrapd src vendor www api tmpl install .env .env.local.php bootstrap.php container.php composer.json package.json package-lock.json"

    if [ -d $TMP_DIR ] ; then
        echo_passed "Directory '$TMP_DIR' already exists, it will be moved..."
        mv $TMP_DIR $TMP_DIR.`date +%Y%m%d-%k%m%S`
    fi

    mkdir -p $TMP_DIR/source

    for folder in $srclistcp ; do
        log "INFO" "$(gettext "Copy") $BASE_DIR/$folder $(gettext "to") $TMP_DIR/source/"
        cp -Rf $BASE_DIR/$folder $TMP_DIR/source
        if [ "$?" -ne 0 ] ; then
            return 1
        fi
    done

    return 0
}

replace_macro() {
    local srclistcp="bin cron config logrotate snmptrapd www tmpl install .env .env.local.php"

    for folder in $srclistcp ; do
        find $TMP_DIR/source/$folder -type f | xargs --delimiter='\n' sed -i \
            -e 's|@INSTALL_DIR_CENTREON@|'"$CENTREON_INSTALL_DIR"'|gi' \
            -e 's|@CENTREON_INSTALL_DIR@|'"$CENTREON_INSTALL_DIR"'|gi' \
            -e 's|@PHP_BIN@|'"$PHP_BINARY"'|gi' \
            -e 's|@PHP_BINARY@|'"$PHP_BINARY"'|gi' \
            -e 's|@BIN_MAIL@|'"$MAIL_BINARY"'|gi' \
            -e 's|@MAIL_BINARY@|'"$MAIL_BINARY"'|gi' \
            -e 's|@PERL_BIN@|'"$PERL_BINARY"'|gi' \
            -e 's|@CENTREON_ETC@|'"$CENTREON_ETC_DIR"'|gi' \
            -e 's|@CENTREON_ETC_DIR@|'"$CENTREON_ETC_DIR"'|gi' \
            -e 's|@CENTREON_LOG@|'"$CENTREON_LOG_DIR"'|gi' \
            -e 's|@CENTREON_LOG_DIR@|'"$CENTREON_LOG_DIR"'|gi' \
            -e 's|@CENTREON_VARLIB@|'"$CENTREON_VARLIB_DIR"'|gi' \
            -e 's|@CENTREON_VARLIB_DIR@|'"$CENTREON_VARLIB_DIR"'|gi' \
            -e 's|@BIN_RRDTOOL@|'"$RRDTOOL_BINRARY"'|gi' \
            -e 's|@RRDTOOL_BINARY@|'"$RRDTOOL_BINRARY"'|gi' \
            -e 's|@CENTSTORAGE_RRD@|'"$CENTSTORAGE_RRD"'|gi' \
            -e 's|@CENTSTORAGE_RRD@|'"$CENTSTORAGE_RRD"'|gi' \
            -e 's|@MONITORING_VARLOG@|'"$ENGINE_LOG_DIR"'|gi' \
            -e 's|@CENTREON_CACHEDIR@|'"$CENTREON_CACHE_DIR"'|gi' \
            -e 's|@CENTREON_CACHE_DIR@|'"$CENTREON_CACHE_DIR"'|gi' \
            -e 's|@CENTPLUGINSTRAPS_BINDIR@|'"$CENTREON_INSTALL_DIR/bin"'|gi' \
            -e 's|@CENTREONPLUGINS@|'"$CENTREON_PLUGINS_DIR"'|gi' \
            -e 's|@CENTREON_PLUGINS_DIR@|'"$CENTREON_PLUGINS_DIR"'|gi' \
            -e 's|@NAGIOS_PLUGINS_DIR@|'"$NAGIOS_PLUGINS_DIR"'|gi' \
            -e 's|@CENTREONTRAPD_BINDIR@|'"$CENTREON_INSTALL_DIR/bin"'|gi' \
            -e 's|@CENTSTORAGE_BINDIR@|'"$CENTREON_INSTALL_DIR/bin"'|gi' \
            -e 's|@CENTREON_ENGINE_CONNECTORS@|'"$ENGINE_CONNECTORS_DIR/bin"'|gi' \
            -e 's|%APP_SECRET%|'"$HEX_KEY"'|gi' \
            -e 's|@CENTREON_USER@|'"$CENTREON_USER"'|gi' \
            -e 's|@CENTREON_GROUP@|'"$CENTREON_GROUP"'|gi' \
            -e 's|@ENGINE_USER@|'"$ENGINE_USER"'|gi' \
            -e 's|@ENGINE_GROUP@|'"$ENGINE_GROUP"'|gi' \
            -e 's|@ENGINE_BINARY@|'"$ENGINE_BINARY"'|gi' \
            -e 's|@ENGINE_LOG_DIR@|'"$ENGINE_LOG_DIR"'|gi' \
            -e 's|@ENGINE_CONNECTORS_DIR@|'"$ENGINE_CONNECTORS_DIR"'|gi' \
            -e 's|@ENGINE_LIB_DIR@|'"$ENGINE_LIB_DIR"'|gi' \
            -e 's|@BROKER_USER@|'"$BROKER_USER"'|gi' \
            -e 's|@BROKER_GROUP@|'"$BROKER_GROUP"'|gi' \
            -e 's|@BROKER_ETC_DIR@|'"$BROKER_ETC_DIR"'|gi' \
            -e 's|@BROKER_MOD_BINARY@|'"$BROKER_MOD_BINARY"'|gi' \
            -e 's|@WEB_USER@|'"$APACHE_USER"'|gi' \
            -e 's|@APACHE_USER@|'"$APACHE_USER"'|gi' \
            -e 's|@WEB_GROUP@|'"$APACHE_GROUP"'|gi' \
            -e 's|@APACHE_GROUP@|'"$APACHE_GROUP"'|gi'\
            -e 's|@PHPFPM_LOG_DIR@|'"$PHPFPM_LOG_DIR"'|gi'\
            -e 's|@PHPFPM_VAR_DIR@|'"$PHPFPM_VAR_DIR"'|gi'\
            -e 's|@PHP_TIMEZONE@|'"$PHP_TIMEZONE"'|gi'
        if [ "$?" -ne 0 ] ; then
            return 1
        fi
    done

    return 0
}

#----
## Define OS
## check on etc to find a specific file <p>
## Debian, Suse, Redhat, FreeBSD
## @param	variable to set a result
## @return 0	OS found
## @return 1	OS not found
#----
find_os() {
    local distrib=$1
    local dist_found=""
    
    # From https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script
    if [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        dist_found=${ID}${VERSION_ID}
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        dist_found=$(lsb_release -si | sed -e 's/\(.*\)/\L\1/')$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        dist_found=${DISTRIB_ID}${DISTRIB_RELEASE}
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        dist_found=debian$(cat /etc/debian_version | cut -d "." -f 1)
    elif [ -f /etc/SuSe-release ]; then
        # Older SuSE/etc.
        ...
    elif [ -f /etc/centos-release ]; then
        # CentOS
        dist_found=centos$(cat /etc/centos-release | cut -d " " -f 4 | cut -d "." -f 1)
    elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        dist_found=centos$(cat /etc/redhat-release | cut -d " " -f 4 | cut -d "." -f 1)
    else
        # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
        dist_found=$(uname -s)$(uname -r)
    fi

    eval $distrib=$dist_found
    return 0
}

get_timezone() {
    if [ -z "$PHP_TIMEZONE" ] ; then
        PHP_TIMEZONE=$(realpath /etc/localtime --relative-to=/usr/share/zoneinfo/)
    fi

    export PHP_TIMEZONE
}

#----
## use this function to clean and exit centreon install
## This function use <@function purge_centreon_tmp_dir> function.
## TODO: Need to add functionality
##      - delete install file
##      - restore inital rigth
##      - ...
#----
clean_and_exit() {
    local trap_sig=${1:-0}
    if [ $trap_sig -eq 0 ] ; then
        echo -e "$(gettext "\nTrap interrupt, Centreon'll exit now and clean installation")"
        yes_no_default "$(gettext "Do you really want to quit Centreon installation? ")" "$no"
        if [ $? -eq 1 ] ; then
            echo "$(gettext "Continue...")"
            return 1
        fi
    fi
    purge_centreon_tmp_dir "silent"
    exit 1
}

#----
## Check space left for working directory
## @return 0	Space ok
## @return 1	No Space left
## @Globals	TMP_DIR
#----
check_tmp_disk_space() {
    local min_space="35584"
    local free_space=""
    local tmp_dir=""

    tmp_dir=$(dirname $TMP_DIR)

    free_space=$(df -P $tmp_dir | tail -1 | awk '{print $4}')

    if [ "$free_space" -lt "$min_space" ] ; then
        echo_failure "$(gettext "No space left on tmp dir") : $tmp_dir  (<$min_space Ko)" "$fail"
        return 1
    else
        return 0
    fi
}

#----
## Ask to remove all temporaries working directory
## @param     silent option (silent)
## @return 0	remove done
## @return 1	don't remove (abort by user)
## @Globals	TMP_DIR, yes
#----
purge_centreon_tmp_dir() {
    local silent="$1"
    local not_clean="1"
    local rc="0"
    while [ $not_clean -ne 0 ] ; do
        if [ "$silent" != "silent" ] ; then
            yes_no_default "$(gettext "Do you want to remove the centreon temporary working space to continue installation ?")" "$yes"
            rc=$?
        else
            rc=0
        fi
        if [ $rc -eq 0 ] ; then
            local tmp_base_dir=`dirname $TMP_DIR`
            local tmp_dir=`basename $TMP_DIR`
            find $tmp_base_dir -name "$tmp_dir*" -type d \
                -exec rm -rf {} \; 2>/dev/null
            not_clean="0"
        else
            return 1
        fi
    done
    return 0
}

#----
## Find file with macro in directory.
## @param	macro (separate with comma)
## @param 	folder where to find
## @param	sub directory to find
## @param	file to search (possible to use pattern)
## @param	variable where define a list of file (temporary file)
## @Globals	LOG_FILE, TMP_DIR
#----
find_macros_in_dir() {
    local macro="$1"
    local src_dir="$2"
    local sub_dir="$3"
    local file="$4"
    local var_ref="$5"
    local file_out_tmp=""
    file_out_tmp=$(mktemp $TMP_DIR/file_out_tmp.XXXXXX)

    for mac in ${macro//,/ } ; do
        log "INFO" "$(gettext "Search file for macro") : $mac"
        ( cd $src_dir ;
            find $sub_dir -mindepth 1 -type f -name "$file" | \
                xargs ${GREP} -l "$mac" | \
                uniq >> "$file_out_tmp" 2>>"$LOG_FILE";
        )
    done

    eval $var_ref=$file_out_tmp
    return 0
}


#----
## Check result and print a message
## @param	return code to check
## @param	message to print
#----
check_result() {
    local code=$1
    shift
    local message=$@

    if [ $code -eq 0 ] ; then
        echo_success "$message" "$ok"
    else
        echo_failure "$message" "$fail"
    fi
    return 0
}
